# app/repo_handler.py
import os
from github import Github, Auth, GithubException
import httpx
from dotenv import load_dotenv
from datetime import datetime

# -------------------------------
# Load environment variables
# -------------------------------
load_dotenv()

GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
USERNAME = os.getenv("GITHUB_USERNAME")  # GitHub username
REPO_NAME = f"{USERNAME}_TDSP1_LLM_Deployment_round1"

# Use new Auth.Token to avoid deprecation warning
auth = Auth.Token(GITHUB_TOKEN)
g = Github(auth=auth)

# -------------------------------
# Repo functions
# -------------------------------
def create_repo(repo_name: str = REPO_NAME, description: str = "LLM deployment task repo"):
    """Create a public repository."""
    user = g.get_user()
    # Check if repo exists
    try:
        repo = user.get_repo(repo_name)
        print("Repo already exists:", repo.full_name)
        return repo
    except GithubException:
        pass

    # Create new repo
    repo = user.create_repo(
        name=repo_name,
        description=description,
        private=False,
        auto_init=False
    )
    print("✅ Created repo:", repo.full_name)
    return repo

def create_or_update_file(repo, path: str, content: str, message: str):
    """Create or update a file."""
    try:
        current = repo.get_contents(path)
        repo.update_file(path, message, content, current.sha)
        print(f"Updated {path} in {repo.full_name}")
    except GithubException as e:
        if e.status == 404:
            repo.create_file(path, message, content)
            print(f"Created {path} in {repo.full_name}")
        else:
            raise
def create_or_update_binary_file(repo, path: str, binary_content: bytes, message: str):
    """Create or update a binary file (like image, PDF, etc.)"""
    import base64
    try:
        current = repo.get_contents(path)
        repo.update_file(path, message, binary_content.decode("latin1"), current.sha)
        print(f"Updated binary file {path} in {repo.full_name}")
    except GithubException as e:
        if e.status == 404:
            repo.create_file(path, message, binary_content.decode("latin1"))
            print(f"Created binary file {path} in {repo.full_name}")
        else:
            raise

def enable_pages(repo_name: str = REPO_NAME, branch: str = "main"):
    """Enable GitHub Pages via REST API."""
    url = f"https://api.github.com/repos/{USERNAME}/{repo_name}/pages"
    headers = {
        "Authorization": f"token {GITHUB_TOKEN}",
        "Accept": "application/vnd.github.v3+json"
    }
    data = {"source": {"branch": branch, "path": "/"}}
    try:
        r = httpx.post(url, headers=headers, json=data, timeout=30.0)
        if r.status_code in (201, 204):
            print("✅ Pages enabled for", repo_name)
            return True
        else:
            print("Pages API returned:", r.status_code, r.text)
            return False
    except Exception as e:
        print("Failed to call Pages API:", e)
        return False

def generate_mit_license(owner_name=None):
    year = datetime.utcnow().year
    owner = owner_name or USERNAME or "Owner"
    return f"""MIT License

Copyright (c) {year} {owner}

Permission is hereby granted, free of charge, to any person obtaining a copy...
[Full MIT license text here]
"""

# -------------------------------
# Execution block for testing
# -------------------------------
if __name__ == "__main__":
    repo = create_repo()
    
    # Add README.md
    readme_content = "# TDS LLM Deployment\n\nThis repo contains code generated by the LLM task."
    create_or_update_file(repo, "README.md", readme_content, "Add README.md")

    # Add MIT LICENSE
    license_content = generate_mit_license()
    create_or_update_file(repo, "LICENSE", license_content, "Add MIT LICENSE")

    # Enable GitHub Pages
    enable_pages()
